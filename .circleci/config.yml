version: 2

jobs:
  build_cpp_docker:
    docker:
      - image: docker:18.06.3-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Docker login"
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: "Download and tag previously generated main image"
          command: |
            docker pull appliedblockchain/zktrading:$CIRCLE_BRANCH || true
            docker tag appliedblockchain/zktrading:$CIRCLE_BRANCH zktrading || true
      - run:
          name: "Build main image"
          command: |
            cd cpp
            docker build -f docker/zktrading.Dockerfile -t zktrading .
      - run:
          name: "Build app images"
          command: |
            cd cpp
            for IMAGE in setup server mtserver convert-vk
            do
              docker build -f docker/$IMAGE.Dockerfile -t appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH .
            done
      - run:
          name: "Push images"
          command: |
            cd cpp
            docker push appliedblockchain/zktrading:$CIRCLE_BRANCH
            for IMAGE in setup server mtserver convert-vk
            do
              docker push appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH
              docker tag appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1
              docker push appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1
            done

  prepare_node:
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: "Enable NVM"
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: "Update node"
          command: |
            nvm install v8
            node -v
            nvm alias default v8
      - restore_cache:
          keys:
            - zktrading-js-root-deps-$CIRCLE_BRANCH
            - zktrading-js-core-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0/package.json" }}
            - zktrading-js-eth-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-eth/package.json" }}
            - zktrading-js-fabric-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-fabric/package.json" }}
            - zktrading-js-platform-state-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-in-memory-platform-state/package.json" }}
            - zktrading-js-secret-store-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-in-memory-secret-store/package.json" }}
            - zktrading-js-integration-tests-eth-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-integration-tests-eth/package.json" }}
            - zktrading-js-integration-tests-fabric-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-integration-tests-fabric/package.json" }}
      - run:
          name: Install lerna
          command: cd js && npm i lerna
      - run:
          name: Lerna bootstrap
          command: cd js && node_modules/.bin/lerna bootstrap --no-ci
      - save_cache:
         key: zktrading-js-root-deps-$CIRCLE_BRANCH
         paths:
           - js/node_modules
      - save_cache:
         key: zktrading-js-core-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0/package.json" }}
         paths:
           - js/packages/k0/node_modules
      - save_cache:
         key: zktrading-js-eth-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-eth/package.json" }}
         paths:
           - js/packages/k0-eth/node_modules
      - save_cache:
         key: zktrading-js-eth-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-fabric/package.json" }}
         paths:
           - js/packages/k0-fabric/node_modules
      - save_cache:
         key: zktrading-js-platform-state-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-in-memory-platform-state/package.json" }}
         paths:
           - js/packages/k0-in-memory-platform-state/node_modules
      - save_cache:
         key: zktrading-js-secret-store-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-eth/in-memory-secret-store.json" }}
         paths:
           - js/packages/k0-in-memory-secret-store/node_modules
      - save_cache:
         key: zktrading-js-integration-tests-eth-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-integration-tests-eth/package.json" }}
         paths:
           - js/packages/k0-integration-tests-eth/node_modules
      - save_cache:
         key: zktrading-js-integration-tests-fabric-deps-$CIRCLE_BRANCH-{{ checksum "js/packages/k0-integration-tests-fabric/package.json" }}
         paths:
           - js/packages/k0-integration-tests-fabric/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - js/node_modules
            - js/packages/k0/node_modules
            - js/packages/k0-eth/node_modules
            - js/packages/k0-fabric/node_modules
            - js/packages/k0-in-memory-platform-state/node_modules
            - js/packages/k0-in-memory-secret-store/node_modules
            - js/packages/k0-integration-tests-eth/node_modules
            - js/packages/k0-integration-tests-fabric/node_modules

  # This could probably be run more efficiently on the docker executor
  chaincode:
    machine:
      image: circleci/classic:201808-01
      docker_layer_caching: true
    working_directory: ~/.go_workspace/src/github.com/appliedblockchain/zktrading
    steps:
      - checkout
      - run:
          name: "Docker login"
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: "Start server"
          command: |
            docker run -d \
            -p 11400:11400 \
            -v $PWD/go/serverclient/testdata/:/tmp/k0keys/:ro \
            appliedblockchain/zktrading-server:$CIRCLE_BRANCH-$CIRCLE_SHA1 \
            6 \
            /tmp/k0keys/example_pk /tmp/k0keys/transfer_vk \
            /tmp/k0keys/example_pk /tmp/k0keys/transfer_vk \
            /tmp/k0keys/example_pk /tmp/k0keys/transfer_vk \
            /tmp/k0keys/example_pk /tmp/k0keys/transfer_vk \
            /tmp/k0keys/example_pk /tmp/k0keys/transfer_vk 11400
      - run:
          name: "Get Fabric source code"
          command: |
            cd ~/.go_workspace/src/github.com
            mkdir hyperledger
            cd hyperledger
            curl -LO https://github.com/hyperledger/fabric/archive/v1.2.0.tar.gz
            tar xf v1.2.0.tar.gz
            mv fabric-1.2.0 fabric
            rm v1.2.0.tar.gz
      - run:
          name: "Run Go tests"
          command: |
            cd go
            VERIFIER_ENDPOINT=http://localhost:11400/ go test ./...

  fabric:
    machine:
      image: circleci/classic:201808-01
      docker_layer_caching: true
    working_directory: ~/.go_workspace/src/github.com/appliedblockchain/zktrading
    steps:
      - checkout
      - run:
          name: "Enable NVM"
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: "Update node"
          command: |
            nvm install v8
            node -v
            nvm alias default v8
      - run:
          name: "Docker login"
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: "Pull and tag app images"
          command: |
            cd cpp
            for IMAGE in setup server mtserver convert-vk pack unpack
            do
              docker pull appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1
              docker tag appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1 zktrading-$IMAGE
            done
      - attach_workspace:
          at: .
      - run:
          name: Install lerna
          command: cd js && npm i lerna
      - run:
          name: Lerna bootstrap
          command: cd js && node_modules/.bin/lerna bootstrap --no-ci
      - run:
          name: "Generate proving and verification keys"
          command: |
            mkdir /tmp/k0keys
            for circuit in commitment transfer addition withdrawal example
            do
              docker run -v /tmp/k0keys:/tmp/k0keys zktrading-setup $circuit 7 /tmp/k0keys/${circuit}_pk /tmp/k0keys/${circuit}_vk
              docker run -v /tmp/k0keys:/tmp/k0keys zktrading-convert-vk /tmp/k0keys/${circuit}_vk /tmp/k0keys/${circuit}_vk_alt
            done
      - run:
          name: "Remove old chaincode images"
          command: |
            docker rmi $(docker images --filter=reference="*k0chaincode*" -q) || true
      - run:
          name: "Get Fabric source code"
          command: |
            cd ~/.go_workspace/src/github.com
            mkdir hyperledger
            cd hyperledger
            curl -LO https://github.com/hyperledger/fabric/archive/v1.2.0.tar.gz
            tar xf v1.2.0.tar.gz
            mv fabric-1.2.0 fabric
            rm v1.2.0.tar.gz
      - run:
          name: "Package K0 chaincode"
          command: |
            cd js/packages/k0-integration-tests-fabric/network
            docker run \
            -v $PWD/artefacts:/artefacts \
            -v ~/.go_workspace/src/github.com/hyperledger/fabric:/opt/gopath/src/github.com/hyperledger/fabric:ro \
            -v ~/.go_workspace/src/github.com/appliedblockchain/zktrading/go:/opt/gopath/src/github.com/appliedblockchain/zktrading/go:ro \
            hyperledger/fabric-tools:1.2.0 \
            peer chaincode package -n k0chaincode -v 1 -p github.com/appliedblockchain/zktrading/go/chaincode/cash \
            /artefacts/k0chaincode.1.out
      - run:
          name: "Spin up Fabric network"
          command: |
            cd js/packages/k0-integration-tests-fabric/network
            CI=true ./start.sh
      - run:
          name: "Install K0 chaincode"
          command: |
            cd js/packages/k0-integration-tests-fabric/network
            for org in alpha beta gamma bank; do docker-compose run ${org}tools peer chaincode install /artefacts/k0chaincode.1.out; done
      - run:
          name: "Instantiate K0 chaincode"
          command: |
            cd js/packages/k0-integration-tests-fabric
            CHAINCODE_ID=k0chaincode node instantiate
      - run:
          name: "Run integration tests"
          command: |
            cd js/packages/k0-integration-tests-fabric
            CHAINCODE_ID=k0chaincode node_modules/.bin/mocha test

  ethereum_integration_tests:
    machine:
      image: circleci/classic:201808-01
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Docker login
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: "Pull and tag the images"
          command: |
            cd cpp
            for IMAGE in setup server mtserver convert-vk pack unpack
            do
              docker pull appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1
              docker tag appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1 zktrading-$IMAGE
            done
      - run:
          name: Generate proving and verification keys
          command: |
            rm -rf /tmp/k0keys
            mkdir /tmp/k0keys
            for circuit in commitment transfer addition withdrawal example
            do
              docker run -v /tmp/k0keys:/tmp/k0keys zktrading-setup $circuit 4 /tmp/k0keys/${circuit}_pk /tmp/k0keys/${circuit}_vk
              docker run -v /tmp/k0keys:/tmp/k0keys zktrading-convert-vk /tmp/k0keys/${circuit}_vk /tmp/k0keys/${circuit}_vk_alt
            done
      - run:
          name: "Enable NVM"
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Setup node 8
          command: nvm install 8 && nvm alias default 8
      - run:
          name: Install Solidity
          command: |
            if [ ! -e solc-static-linux ]; then
              wget https://github.com/ethereum/solidity/releases/download/v0.5.3/solc-static-linux && chmod +x solc-static-linux
            fi
            chmod +x solc-static-linux && sudo cp solc-static-linux /usr/bin/solc
      - run:
          name: Run the Docker servers
          command: cd js/packages/k0-integration-tests-eth/network && docker-compose up -d && docker-compose logs -f
          background: true
      - attach_workspace:
          at: .
      - run:
          name: Install lerna
          command: cd js && npm i lerna
      - run:
          name: Lerna bootstrap
          command: cd js && node_modules/.bin/lerna bootstrap --no-ci
      - run:
          name: Run tests
          command: cd js/packages/k0-integration-tests-eth && npm test


workflows:
  version: 2
  main:
    jobs:
      - build_cpp_docker:
          context: org-global
      - prepare_node:
          context: org-global
      - chaincode:
          context: org-global
          requires:
            - build_cpp_docker
      - fabric:
          context: org-global
          requires:
            - build_cpp_docker
            - prepare_node
      - ethereum_integration_tests:
          context: org-global
          requires:
            - build_cpp_docker
            - prepare_node

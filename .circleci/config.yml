version: 2

jobs:
  build_cpp_docker:
    machine:
      image: circleci/classic:201808-01
      docker_layer_caching: true
    steps:
      - checkout
#      - run: docker images --no-trunc --format '{{.ID}}' | xargs docker rmi || true
      - run:
          name: "Get Git submodules"
          command: git submodule update --init --recursive
      - run:
          name: "Docker login"
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: "Download previously generated images"
          command: |
            docker pull appliedblockchain/zktrading-builder-$CIRCLE_BRANCH
            docker pull appliedblockchain/zktrading-$CIRCLE_BRANCH
            for IMAGE in setup server mtserver convert-vk
            do
              docker pull appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH
            done
      - run:
          name: "Build builder image"
          command: |
            cd cpp
            docker build -f docker/builder.Dockerfile -t zktrading-builder .
      - run:
          name: "Build main image"
          command: |
            cd cpp
            docker build -f docker/zktrading.Dockerfile -t zktrading .
      - run:
          name: "Build app images"
          command: |
            cd cpp
            for IMAGE in setup server mtserver convert-vk
            do
              docker build -f docker/$IMAGE.Dockerfile -t appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH .
            done
      - run:
          name: "Push images"
          command: |
            cd cpp
            docker push appliedblockchain/zktrading-builder-$CIRCLE_BRANCH
            docker push appliedblockchain/zktrading-$CIRCLE_BRANCH
            for IMAGE in setup server mtserver convert-vk
            do
              docker push appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH
              docker tag appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1
              docker tag appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1
            done

  # build_cpp:
  #   docker:
  #     - image: appliedblockchain/snarkapps-base
  #       auth:
  #         username: $DOCKER_USER
  #         password: $DOCKER_PASSWORD
  #   steps:
  #     - checkout
  #     - run:
  #         name: Init Git submodules
  #         command: git submodule update --init --recursive
  #     - run:
  #         name: "Create hash of src contents"
  #         command: find cpp/src -type f | sort | xargs cat | md5sum > srchash.txt
  #     - restore_cache:
  #         keys:
  #           - zktrading-{{ checksum "srchash.txt" }}
  #     - run:
  #         name: "C++: CMake"
  #         command: mkdir -p cpp/build && cd cpp/build && cmake ..
  #     - run:
  #         name: "C++: Make"
  #         command: cd cpp/build && make
  #     - save_cache:
  #        key: zktrading-{{ checksum "srchash.txt" }}
  #        paths:
  #          - cpp/build
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - cpp/build/src
  #           - cpp/build/test
  prepare_node:
    docker:
      - image: appliedblockchain/snarkapps-base
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - run:
          name: Install npm modules
          command: cd js && npm i
      - persist_to_workspace:
          root: .
          paths:
            - js/node_modules

  # run_private_trade_test:
  #   docker:
  #     - image: appliedblockchain/snarkapps-base
  #       auth:
  #         username: $DOCKER_USER
  #         password: $DOCKER_PASSWORD
  #     - image: appliedblockchain/parity-solo
  #       auth:
  #         username: $DOCKER_USER
  #         password: $DOCKER_PASSWORD
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Make sure npm modules are installed
  #         command: cd js && npm i
  #     - run:
  #         name: Setup
  #         command: |
  #           for x in commitment addition transfer withdrawal
  #           do
  #           cpp/build/src/setup ${x} 16 /tmp/zktrade_${x}_pk /tmp/zktrade_${x}_vk
  #           cpp/build/src/convert_vk /tmp/zktrade_${x}_vk /tmp/zktrade_${x}_vk_alt
  #           done
  #     - run:
  #         name: Start server
  #         command: |
  #           cpp/build/src/server 16 /tmp/zktrade_commitment_pk \
  #           /tmp/zktrade_commitment_vk /tmp/zktrade_addition_pk \
  #           /tmp/zktrade_addition_vk /tmp/zktrade_transfer_pk \
  #           /tmp/zktrade_transfer_vk /tmp/zktrade_withdrawal_pk \
  #           /tmp/zktrade_withdrawal_vk
  #         background: true
  #     - run:
  #         name: Run MVPPT test
  #         command: cd js && node_modules/.bin/mocha test/mvppt.js
  #     - run:
  #         name: Run private trade test
  #         command: cd js && node_modules/.bin/mocha test/private-trade.js

  fabric:
    machine:
      image: circleci/classic:201808-01
      docker_layer_caching: true
    working_directory: ~/.go_workspace/src/github.com/appliedblockchain/zktrading
    steps:
      - checkout
      - run:
          name: "Docker login"
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: "Pull and tag app images"
          command: |
            cd cpp
            for IMAGE in setup server mtserver convert-vk
            do
              docker pull appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1
              docker tag appliedblockchain/zktrading-$IMAGE:$CIRCLE_BRANCH-$CIRCLE_SHA1 zktrading-$IMAGE
            done
      - attach_workspace:
          at: .
      - run:
          name: "Generate proving and verification keys"
          command: |
            mkdir /tmp/k0keys
            for circuit in commitment transfer addition withdrawal example
            do
              docker run -v /tmp/k0keys:/tmp/k0keys zktrading-setup $circuit 7 /tmp/k0keys/${circuit}_pk /tmp/k0keys/${circuit}_vk
              docker run -v /tmp/k0keys:/tmp/k0keys zktrading-convert-vk /tmp/k0keys/${circuit}_vk /tmp/k0keys/${circuit}_vk_alt
            done
      - run:
          name: "Get Fabric source code"
          command: |
            cd ~/.go_workspace/src/github.com
            mkdir hyperledger
            cd hyperledger
            curl -LO https://github.com/hyperledger/fabric/archive/v1.2.0.tar.gz
            tar xf v1.2.0.tar.gz
            mv fabric-1.2.0 fabric
            rm v1.2.0.tar.gz
      - run:
          name: "Package chaincode"
          command: |
            cd js/test/fabric/network
            docker run \
            -v $PWD/artefacts:/artefacts \
            -v ~/.go_workspace/src/github.com/hyperledger/fabric:/opt/gopath/src/github.com/hyperledger/fabric:ro \
            -v ~/.go_workspace/src/github.com/appliedblockchain/zktrading/fabric/chaincode:/opt/gopath/src/github.com/appliedblockchain/zktrading/fabric/chaincode:ro \
            hyperledger/fabric-tools:1.2.0 \
            peer chaincode package -n k0chaincode -v 1 -p github.com/appliedblockchain/zktrading/fabric/chaincode/cash \
            /artefacts/k0chaincode.1.out
      - run:
          name: "Spin up Fabric network"
          command: |
            cd js/test/fabric/network
            CI=true ./start.sh
      - run:
          name: "Install chaincode"
          command: |
            cd js/test/fabric/network
            for org in alpha beta gamma; do docker-compose run ${org}tools peer chaincode install /artefacts/k0chaincode.1.out; done
      - run:
          name: "Instantiate chaincode"
          command: |
            cd js/test/fabric
            node instantiate
      - run:
          name: "Run integration tests"
          command: |
            cd js
            node_modules/.bin/mocha test/fabric/test.js

workflows:
  version: 2
  main:
    jobs:
      - build_cpp_docker:
          context: org-global
      - prepare_node:
          context: org-global
      - fabric:
          context: org-global
          requires:
            - prepare_node
            - build_cpp_docker
    #  - build_cpp:
    #       context: org-global
    #  - run_private_trade_test:
    #       context: org-global
    #       requires:
    #         - build_cpp
    #         - prepare_node

version: 2

jobs:
  build_cpp:
    docker:
      - image: appliedblockchain/snarkapps-base
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - run:
          name: Init Git submodules
          command: git submodule update --init --recursive
      - run:
          name: "Create hash of src contents"
          command: find cpp/src -type f | sort | xargs cat | md5sum > srchash.txt
      - restore_cache:
          keys:
            - zktrading-{{ checksum "srchash.txt" }}
      - run:
          name: "C++: CMake"
          command: mkdir -p cpp/build && cd cpp/build && cmake ..
      - run:
          name: "C++: Make"
          command: cd cpp/build && make
      - save_cache:
         key: zktrading-{{ checksum "srchash.txt" }}
         paths:
           - cpp/build
      - persist_to_workspace:
          root: .
          paths:
            - cpp/build/src
            - cpp/build/test
  prepare_node:
    docker:
      - image: appliedblockchain/snarkapps-base
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - run:
          name: Install npm modules
          command: cd js && npm i
      - persist_to_workspace:
          root: .
          paths:
            - js/node_modules

  run_private_trade_test:
    docker:
      - image: appliedblockchain/snarkapps-base
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
      - image: appliedblockchain/parity-solo
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Make sure npm modules are installed
          command: cd js && npm i
      - run:
          name: Setup
          command: |
            for x in commitment addition transfer withdrawal
            do
            cpp/build/src/setup ${x} 16 /tmp/zktrade_${x}_pk /tmp/zktrade_${x}_vk
            cpp/build/src/convert_vk /tmp/zktrade_${x}_vk /tmp/zktrade_${x}_vk_alt
            done
      - run:
          name: Start server
          command: |
            cpp/build/src/server 16 /tmp/zktrade_commitment_pk \
            /tmp/zktrade_commitment_vk /tmp/zktrade_addition_pk \
            /tmp/zktrade_addition_vk /tmp/zktrade_transfer_pk \
            /tmp/zktrade_transfer_vk /tmp/zktrade_withdrawal_pk \
            /tmp/zktrade_withdrawal_vk
          background: true
      - run:
          name: Run MVPPT test
          command: cd js && node_modules/.bin/mocha test/mvppt.js
      - run:
          name: Run private trade test
          command: cd js && node_modules/.bin/mocha test/private-trade.js

  fabric:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: "Start Fabric network: Create crypto config"
          command: |
            docker run -v $PWD/fabric/test/network/crypto-config.yaml:/crypto-config.yaml:ro -v $PWD/fabric/test/network/crypto-config:/crypto-config hyperledger/fabric-tools:1.2.0 cryptogen generate --config=/crypto-config.yaml --output=/crypto-config
            sudo chmod -R +r $PWD/fabric/test/network/crypto-config
      - run:
          name: "Start Fabric network: Create orderer genesis block"
          command: docker run -it -v $PWD/fabric/test/network:/config hyperledger/fabric-tools:1.2.0 configtxgen -configPath /config -profile TheGenesis -channelID orderer-system-channel -outputBlock /config/artefacts/orderer_genesis.block
      - run:
          name: "Start Fabric network: Start Docker containers"
          command: cd test/network && docker-compose up -d
      - run:
          name: "Start Fabric network: Generate channel creation tx"
          command: docker run -it -v $PWD/fabric/test/network:/config hyperledger/fabric-tools:1.2.0 configtxgen -configPath /config -profile TheChannel -channelID the-channel -outputCreateChannelTx ./config/artefacts/channel_creation.tx
      - run:
          name: "Start Fabric network: Create channel"
          command: cd test/network && docker-compose run -w /artefacts alphatools peer channel create -o orderer.orderer.org:7050 -c the-channel -f channel_creation.tx --tls true --cafile /orderer/ca.crt
      - run:
          name: "Start Fabric network: Join channel"
          command: |
            for org in alpha beta gamma; do docker-compose run ${org}tools peer channel join -b /artefacts/the-channel.block; done
      - run:
          name: "Start Fabric network: Generate anchor definition txs"
          command: |
            docker run -it -v $PWD/fabric/test/network:/config hyperledger/fabric-tools:1.2.0 configtxgen -configPath /config -profile TheChannel -channelID the-channel -outputAnchorPeersUpdate ./config/artefacts/alphaco_anchor_peers_definition.tx -asOrg AlphaCo
            docker run -it -v $PWD/fabric/test/network:/config hyperledger/fabric-tools:1.2.0 configtxgen -configPath /config -profile TheChannel -channelID the-channel -outputAnchorPeersUpdate ./config/artefacts/betaco_anchor_peers_definition.tx -asOrg BetaCo
            docker run -it -v $PWD/fabric/test/network:/config hyperledger/fabric-tools:1.2.0 configtxgen -configPath /config -profile TheChannel -channelID the-channel -outputAnchorPeersUpdate ./config/artefacts/gammaco_anchor_peers_definition.tx -asOrg GammaCo
      - run:
          name: "Start Fabric network: Send anchor definition txs"
          command: |
            for org in alpha beta gamma; do docker-compose run ${org}tools peer channel update -o orderer.orderer.org:7050 -c the-channel -f /artefacts/${org}co_anchor_peers_definition.tx --tls true --cafile /orderer/ca.crt; done

workflows:
  version: 2
  main:
    jobs:
      - build_cpp:
          context: org-global
      - prepare_node:
          context: org-global
      - run_private_trade_test:
          context: org-global
          requires:
            - build_cpp
            - prepare_node
      - fabric
